name: API Commit Stage

on: 
  push:  # Trigger on merge to master
    branches:
      - main

env:
  run_number: ${GITHUB_RUN_NUMBER}

permissions:
  checks: write

jobs:
  commit-stage-checks:
    name: Commit Stage Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout out branch
        uses: actions/checkout@v3
        with:
          path: head
      - name: "Run API linting (with Spectral)"
        uses: stoplightio/spectral-action@latest
        with:
          file_glob: 'head/reference/*.oas.yaml'
          spectral_ruleset: 'head/.spectral.yaml'
      - name: Check out master branch
        uses: actions/checkout@v3
        with:
          ref: master
          path: base
      - name: "Run breaking change check (with OpenAPITools/openapi-diff)"
        id: diff_state
        uses: swimmwatch/openapi-diff-action@v1.0.0
        with:
          old-spec: base/reference/product-catalog-api.oas.yaml
          new-spec: head/reference/product-catalog-api.oas.yaml
          json: "out.json"
          markdown: "out.md"
      - name: "Upload OpenAPI-diff report as Github Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: diff-reports
          path: |
            ./out.md
            ./out.json
      - name: "Fail if breaking change"
        if: ${{ steps.diff_state.outputs.state == 'incompatible' }} 
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed("Failed due to breaking change! Diff state - ${{ steps.diff_state.outputs.state }} ")
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 14
      - name: Install Portman 
        run: |
          npm install -g @apideck/portman
          portman --version
      - name: Install Newman  # TODO Replace with https://github.com/marketplace/actions/newman-action 
        run: |
          npm install -g newman
          newman --version
      - name: Run API unit tests (with Newman)
        run: |
          newman run head/api.postman.json 
  publish-to-artifact-repo: # TODO zip artifacts (spec, generated tests, and postman collections)
    name: Publish to artifact repo
    runs-on: ubuntu-latest
    steps:
      - name: "Check out master"
        uses: actions/checkout@v3
      - name: "Zip API definition, test and config"
        run: |
            zip artifacts.zip api.oas.yaml
      - name: "Setup artifact repository CLI (Jfrog CLI)" 
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ENV_1: ${{ secrets.JF_SECRET }}
      - name: "Upload to artifact repository (Jfrog Artifactory)"
        run: |
            jf rt u artifacts.zip default-api-generic-local/com.acmeps/product-catalog-api/artifacts.${{ env.run_number }}.zip
            jf rt bp
      




